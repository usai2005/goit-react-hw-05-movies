{"version":3,"file":"static/js/134.073743f0.chunk.js","mappings":"mLACA,EAAoC,kC,SCGvBA,EAAS,SAAC,GACrB,OADqC,EAAdC,UAGnB,gBAAKC,UAAWC,EAAhB,UACE,SAAC,KAAD,CACEC,YAAY,UACZC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,KACNC,SAAS,KAKlB,C,iHCbKC,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NAmFN,UA/Ee,WAAa,IAAD,EACzB,GAAwCC,EAAAA,EAAAA,UAAS,MAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAwCC,EAAAA,EAAAA,IAAgB,CAAC,GAAzD,eAAOC,EAAP,KAAqBC,EAArB,KACMC,GAAWC,EAAAA,EAAAA,MACjB,GAAsCP,EAAAA,EAAAA,UAAS,IAA/C,eAAOQ,EAAP,KAAoBC,EAApB,KACMC,EAAa,UAAGN,EAAaO,IAAI,gBAApB,QAAgC,GAEnD,GAAkCX,EAAAA,EAAAA,WAAS,GAA3C,eAAOY,EAAP,KAAkBC,EAAlB,MAEAC,EAAAA,EAAAA,YAAU,WAAM,wCAKd,sGACyBC,MAAM,6CAAD,OACmBP,EADnB,8CAE1Bb,GAHJ,cACQqB,EADR,gBAMwBA,EAASC,OANjC,cAMQC,EANR,yBAOSA,GAPT,4CALc,sBACM,KAAhBV,IAEJK,GAAa,GAHC,0CAedM,GACGC,MAAK,SAAAF,GACJ,IAAMG,EAAaH,EAAQA,QAE3BhB,EAAgBmB,EACjB,IACAC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,EAAlB,IAETG,QAAQb,GAAa,IACzB,GAAE,CAACL,IAkBJ,OACE,4BACG,SAAC,IAAD,CAAQrB,QAASyB,KAClB,kBAAMe,SAXW,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cAEftB,EAAe,SAAD,OAAUqB,EAAKE,SAASxB,YAAYyB,QAClDH,EAAKI,OACN,EAKG,WACE,kBACEC,KAAK,OACLC,KAAK,cACLH,MAAOvB,EACP2B,SAxBkB,SAAAT,GACxB,IAAMU,EAAYV,EAAEW,OAAON,MAGvB5B,EADU,KAAdiC,EACoB,CAAC,EACD,CAAEE,MAAOF,GAC9B,KAoBK,mBAAQH,KAAK,SAAb,SAAsB,eAExB,wBACGlC,GACCA,EAAawC,KAAI,SAAAC,GACf,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAKD,EAAME,IAAMC,MAAO,CAAEC,KAAMxC,GAAxC,SACGoC,EAAMK,MAAQL,EAAMK,MAAQL,EAAMN,QAF9BM,EAAME,GAMlB,QAIV,C","sources":["webpack://goit-react-hw-05-movies/./src/components/Loader/Loader.module.css?d03f","components/Loader/Loader.jsx","pages/Movies.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loader__container\":\"Loader_loader__container__dne6P\"};","import PropTypes from 'prop-types';\nimport { RotatingLines } from 'react-loader-spinner';\nimport css from './Loader.module.css';\n\nexport const Loader = ({ loading }) => {\n  return (\n    loading && (\n      <div className={css.loader__container}>\n        <RotatingLines\n          strokeColor=\"#FF0000\"\n          strokeWidth=\"5\"\n          animationDuration=\"0.75\"\n          width=\"50\"\n          visible={true}\n        />\n      </div>\n    )\n  );\n};\n\nLoader.propTypes = {\n  loading: PropTypes.bool.isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { useSearchParams, useLocation } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport { Loader } from '../components/Loader/Loader';\n\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJjMGUxN2RiYWMzM2I5YjY2YTE1OGFjMWQ5ZjBiNDgzZiIsInN1YiI6IjY0NmFhMTAxMmJjZjY3MDEzODk1NWI2MSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.SDn_VnUi_rZiJUD7l1IkM4cvRuTnV717d1ByGV3DRUI',\n  },\n};\n\nconst Movies = function () {\n  const [searchResult, setSearchResult] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams({});\n  const location = useLocation();\n  const [searchQuery, setSearchQuery] = useState('');\n  const onChangeQuery = searchParams.get('query') ?? '';\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (searchQuery === '') return;\n\n    setIsLoading(true);\n\n    async function searchMovie() {\n      const response = await fetch(\n        `https://api.themoviedb.org/3/search/movie?${searchQuery}&include_adult=false&language=en-US&page=1`,\n        options\n      );\n\n      const results = await response.json();\n      return results;\n    }\n\n    searchMovie()\n      .then(results => {\n        const moviesList = results.results;\n\n        setSearchResult(moviesList);\n      })\n      .catch(err => console.error(err))\n\n      .finally(setIsLoading(false));\n  }, [searchQuery]);\n\n  const updateQueryString = e => {\n    const movieName = e.target.value;\n\n    movieName === ''\n      ? setSearchParams({})\n      : setSearchParams({ query: movieName });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n\n    setSearchQuery(`query=${form.elements.searchQuery.value}`);\n    form.reset();\n  };\n\n  return (\n    <div>\n      {<Loader loading={isLoading} />}\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"searchQuery\"\n          value={onChangeQuery}\n          onChange={updateQueryString}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n      <ul>\n        {searchResult &&\n          searchResult.map(movie => {\n            return (\n              <li key={movie.id}>\n                <Link to={`${movie.id}`} state={{ from: location }}>\n                  {movie.title ? movie.title : movie.name}\n                </Link>\n              </li>\n            );\n          })}\n      </ul>\n    </div>\n  );\n};\n\nexport default Movies;\n"],"names":["Loader","loading","className","css","strokeColor","strokeWidth","animationDuration","width","visible","options","method","headers","accept","Authorization","useState","searchResult","setSearchResult","useSearchParams","searchParams","setSearchParams","location","useLocation","searchQuery","setSearchQuery","onChangeQuery","get","isLoading","setIsLoading","useEffect","fetch","response","json","results","searchMovie","then","moviesList","catch","err","console","error","finally","onSubmit","e","preventDefault","form","currentTarget","elements","value","reset","type","name","onChange","movieName","target","query","map","movie","to","id","state","from","title"],"sourceRoot":""}