{"version":3,"file":"static/js/884.085cb94b.chunk.js","mappings":"mLACA,EAAoC,kC,SCGvBA,EAAS,SAAC,GACrB,OADqC,EAAdC,UAGnB,gBAAKC,UAAWC,EAAhB,UACE,SAAC,KAAD,CACEC,YAAY,UACZC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,KACNC,SAAS,KAKlB,C,iHCbKC,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NA4EN,UAxEqB,WAAa,IAAD,IAC/B,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAA0BN,EAAAA,EAAAA,UAAS,GAAnC,eAAOO,EAAP,KAAcC,EAAd,KACA,GAAgCR,EAAAA,EAAAA,UAAS,IAAzC,eAAOS,EAAP,KAAiBC,EAAjB,KACA,GAAkCV,EAAAA,EAAAA,WAAS,GAA3C,eAAOW,EAAP,KAAkBC,EAAlB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAcC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,KAE3CC,GAAYC,EAAAA,EAAAA,MAAZD,QA4BR,OA1BAE,EAAAA,EAAAA,YAAU,WAAM,wCAGd,sGACyBC,MAAM,sCAAD,OACYH,EADZ,mBAE1BxB,GAHJ,cACQ4B,EADR,gBAK6BA,EAASC,OALtC,cAKQC,EALR,yBAMSA,GANT,4CAHc,sBACdb,GAAa,GADC,0CAWdc,GACGC,MAAK,SAAAF,GACJvB,EAAS,mCAAD,OAAoCuB,EAAaG,cAEzDxB,EAAUqB,EAAatB,QACvBG,EAASmB,EAAapB,OACtBG,GAAsC,GAA5BiB,EAAaI,cAAmBC,QAAQ,IAClDpB,EAAYe,EAAahB,SAC1B,IAEAsB,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,EAAlB,IAETG,QAAQvB,GAAa,GACzB,GAAE,CAACO,KAGF,iCACE,4BACE,SAAC,KAAD,CAAMiB,GAAIrB,EAAYsB,QAAtB,SAA+B,aAC9B,SAAC,IAAD,CAAQlD,QAASwB,KAClB,gBAAK2B,IAAKrC,EAAOR,MAAM,MAAM8C,IAAKlC,KAElC,wBAAKA,KACL,yBAAG,eAAaE,EAAM,QACtB,wBAAI,cACJ,uBAAIE,KAEJ,wBAAI,YACJ,wBACGN,EAAOqC,KAAI,YAAmB,IAAhBC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KACjB,OAAO,wBAAcA,GAALD,EACjB,UAGL,2BACE,yBACE,SAAC,KAAD,CAAML,GAAG,OAAT,SAAgB,YAElB,yBACE,SAAC,KAAD,CAAMA,GAAG,UAAT,SAAmB,kBAGvB,SAAC,EAAAO,SAAD,CAAUC,UAAU,yBAAK,eAAzB,UACE,SAAC,KAAD,QAIP,C","sources":["webpack://goit-react-hw-05-movies/./src/components/Loader/Loader.module.css?d03f","components/Loader/Loader.jsx","pages/MovieDetails.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loader__container\":\"Loader_loader__container__dne6P\"};","import PropTypes from 'prop-types';\nimport { RotatingLines } from 'react-loader-spinner';\nimport css from './Loader.module.css';\n\nexport const Loader = ({ loading }) => {\n  return (\n    loading && (\n      <div className={css.loader__container}>\n        <RotatingLines\n          strokeColor=\"#FF0000\"\n          strokeWidth=\"5\"\n          animationDuration=\"0.75\"\n          width=\"50\"\n          visible={true}\n        />\n      </div>\n    )\n  );\n};\n\nLoader.propTypes = {\n  loading: PropTypes.bool.isRequired,\n};\n","import { Link, Outlet } from 'react-router-dom';\nimport { useState, useEffect, useRef, Suspense } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport { Loader } from '../components/Loader/Loader';\n\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJjMGUxN2RiYWMzM2I5YjY2YTE1OGFjMWQ5ZjBiNDgzZiIsInN1YiI6IjY0NmFhMTAxMmJjZjY3MDEzODk1NWI2MSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.SDn_VnUi_rZiJUD7l1IkM4cvRuTnV717d1ByGV3DRUI',\n  },\n};\n\nconst MovieDetails = function () {\n  const [image, setImage] = useState('');\n  const [genres, setGenres] = useState([]);\n  const [title, setTitle] = useState('');\n  const [score, setScore] = useState(0);\n  const [overview, setOverview] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const location = useLocation();\n  const locationRef = useRef(location.state?.from ?? '/');\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    async function fetchMovieDetails() {\n      const response = await fetch(\n        `https://api.themoviedb.org/3/movie/${movieId}?language=en-US`,\n        options\n      );\n      const movieDetails = await response.json();\n      return movieDetails;\n    }\n    fetchMovieDetails()\n      .then(movieDetails => {\n        setImage(`https://image.tmdb.org/t/p/w500/${movieDetails.poster_path}`);\n\n        setGenres(movieDetails.genres);\n        setTitle(movieDetails.title);\n        setScore((movieDetails.vote_average * 10).toFixed(0));\n        setOverview(movieDetails.overview);\n      })\n\n      .catch(err => console.error(err))\n\n      .finally(setIsLoading(false));\n  }, [movieId]);\n\n  return (\n    <>\n      <div>\n        <Link to={locationRef.current}>Go back</Link>\n        {<Loader loading={isLoading} />}\n        <img src={image} width=\"300\" alt={title}></img>\n\n        <h1>{title}</h1>\n        <p>User score: {score}%</p>\n        <h2>Overview</h2>\n        <p>{overview}</p>\n\n        <h3>Genres</h3>\n        <ul>\n          {genres.map(({ id, name }) => {\n            return <li key={id}>{name}</li>;\n          })}\n        </ul>\n      </div>\n      <ul>\n        <li>\n          <Link to=\"cast\">Cast</Link>\n        </li>\n        <li>\n          <Link to=\"reviews\">Reviews</Link>\n        </li>\n      </ul>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["Loader","loading","className","css","strokeColor","strokeWidth","animationDuration","width","visible","options","method","headers","accept","Authorization","useState","image","setImage","genres","setGenres","title","setTitle","score","setScore","overview","setOverview","isLoading","setIsLoading","location","useLocation","locationRef","useRef","state","from","movieId","useParams","useEffect","fetch","response","json","movieDetails","fetchMovieDetails","then","poster_path","vote_average","toFixed","catch","err","console","error","finally","to","current","src","alt","map","id","name","Suspense","fallback"],"sourceRoot":""}