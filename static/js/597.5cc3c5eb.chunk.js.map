{"version":3,"file":"static/js/597.5cc3c5eb.chunk.js","mappings":"yNAIMA,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NA0DN,UAtDa,WACX,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAwBR,OAtBAE,EAAAA,EAAAA,YAAU,WAAM,wCAGd,sGACyBC,MAAM,sCAAD,OACYH,EADZ,2BAE1BV,GAHJ,cACQc,EADR,gBAK2BA,EAASC,OALpC,cAKQC,EALR,yBAOSA,GAPT,4CAHc,sBACdP,GAAa,GADC,0CAadQ,GACGC,MAAK,SAAAF,GACJT,EAAQS,EAAWV,KACpB,IACAa,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,EAAlB,IAETG,QAAQd,GAAa,GACzB,GAAE,CAACC,KAGF,iCACG,SAAC,IAAD,CAAQc,QAAShB,IACD,IAAhBF,EAAKmB,QACJ,uBAAG,uDAEH,wBACGnB,EAAKoB,KAAI,YAAqD,IAAlDC,EAAiD,EAAjDA,GAAIC,EAA6C,EAA7CA,aAAcC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UAC5C,OACE,2BACE,gBACEC,IAAG,0CAAqCH,GACxCI,MAAM,MACNC,IAAKL,IAENC,GACD,uBAAIC,MAPGH,EAUZ,QAKV,C,mEChED,EAAoC,kC,SCGvBO,EAAS,SAAC,GACrB,OADqC,EAAdV,UAGnB,gBAAKW,UAAWC,EAAhB,UACE,SAAC,KAAD,CACEC,YAAY,UACZC,YAAY,IACZC,kBAAkB,OAClBP,MAAM,KACNQ,SAAS,KAKlB,C","sources":["components/Cast.jsx","webpack://goit-react-hw-05-movies/./src/components/Loader/Loader.module.css?d03f","components/Loader/Loader.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from '../components/Loader/Loader';\n\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJjMGUxN2RiYWMzM2I5YjY2YTE1OGFjMWQ5ZjBiNDgzZiIsInN1YiI6IjY0NmFhMTAxMmJjZjY3MDEzODk1NWI2MSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.SDn_VnUi_rZiJUD7l1IkM4cvRuTnV717d1ByGV3DRUI',\n  },\n};\n\nconst Cast = function () {\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    async function fetchCast() {\n      const response = await fetch(\n        `https://api.themoviedb.org/3/movie/${movieId}/credits?language=en-US`,\n        options\n      );\n      const actorsList = await response.json();\n\n      return actorsList;\n    }\n\n    fetchCast()\n      .then(actorsList => {\n        setCast(actorsList.cast);\n      })\n      .catch(err => console.error(err))\n\n      .finally(setIsLoading(false));\n  }, [movieId]);\n\n  return (\n    <>\n      {<Loader loading={isLoading} />}\n      {cast.length === 0 ? (\n        <p>Sorry, we don't have information about the actors</p>\n      ) : (\n        <ul>\n          {cast.map(({ id, profile_path, original_name, character }) => {\n            return (\n              <li key={id}>\n                <img\n                  src={`https://image.tmdb.org/t/p/w500/${profile_path}`}\n                  width=\"100\"\n                  alt={profile_path}\n                ></img>\n                {original_name}\n                <p>{character}</p>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","// extracted by mini-css-extract-plugin\nexport default {\"loader__container\":\"Loader_loader__container__dne6P\"};","import PropTypes from 'prop-types';\nimport { RotatingLines } from 'react-loader-spinner';\nimport css from './Loader.module.css';\n\nexport const Loader = ({ loading }) => {\n  return (\n    loading && (\n      <div className={css.loader__container}>\n        <RotatingLines\n          strokeColor=\"#FF0000\"\n          strokeWidth=\"5\"\n          animationDuration=\"0.75\"\n          width=\"50\"\n          visible={true}\n        />\n      </div>\n    )\n  );\n};\n\nLoader.propTypes = {\n  loading: PropTypes.bool.isRequired,\n};\n"],"names":["options","method","headers","accept","Authorization","useState","cast","setCast","isLoading","setIsLoading","movieId","useParams","useEffect","fetch","response","json","actorsList","fetchCast","then","catch","err","console","error","finally","loading","length","map","id","profile_path","original_name","character","src","width","alt","Loader","className","css","strokeColor","strokeWidth","animationDuration","visible"],"sourceRoot":""}